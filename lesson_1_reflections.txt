1) How did viewing a diff between two versions of a file help you see the bug that was introduced?

Limited the number of lines my eyes had to scan.
Knowing there was a difference forced me to notice the !, where I skipped over it when scanning all lines manually.
It was quick and usefull.  + and - helped to show the modified lines.

2) How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

There have beeen plenty of times I modified a file and got an error and spent hours trying to get it working again by figuring out what I had changed.

3) What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Pros: Custom to the individual or the organization.  Not excessive.
Cons: An individual may forget to make commits.

4) Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Git is designed to be more flexible because uses such as programming can impact more than on file that are related. ie. html css

5) How can you use the commands git log and git diff to view the history of files?

git log with display the commit ID's
use git diff to display changes between the two ID's like this...
git diff f19cb1b80fe27e938e4d72770ca0a42f25e99ecc b0678b161fcf74467ed3a63110557e3d6229cfa6

6) How might using version control make you more confident to make changes that could break something?

I can use git checkout <CommitID> to restore all files.

7) Now that you have your workspace set up, what do you want to try using Git for?

Complete the other 2 lessons.  Then use with Android.

Git command review

Compare two commits, printing each line that is present in one commit but not the other.

git diff will do this. It takes two arguments - the two commit ids to compare. 


Make a copy of an entire Git repository, including the history, onto your own computer.

git clone will do this. It takes one argument - the url of the repository to copy. 


Temporarily reset all files in a directory to their state at the time of a specific commit.

git checkout will do this. It takes one argument - the commit ID to restore. 


Show the commits made in this repository, starting with the most recent.

git log will do this. It doesn't take any arguments.

Behavior of git clone

If someone else gives you the location of their directory or repository, you can copy or clone it to your own computer.

This is true for both copying a directory and cloning a repository.

As you saw in the previous lesson, if you have a URL to a repository, you can copy it to your computer using git clone.

For copying a directory, you weren't expected to know this, but it is possible to copy a directory from one computer to another using the command scp, which stands for "secure copy". The name was chosen because the scp command lets you securely copy a directory from one computer to another. 


The history of changes to the directory or repository is copied.

This is true for cloning a repository, but not for copying a directory. The main reason to use git clone rather than copying the directory is because git clone will also copy the commit history of the repository. However, copying can be done on any directory, whereas git clone only works on a Git repository. 


If you make changes to the copied directory or cloned repository, the original will not change.

This is true for both copying a directory and cloning a repository. In both cases, you're making a copy that you can alter without changing the original. 


The state of every file in the directory or repository is copied.

This is true for both copying a directory and cloning a repository. In both cases, all the files are copied.